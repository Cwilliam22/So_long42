So_long :

Gestion des ibliothèques :

MLX (MiniLibX)
- MLX est une petite bibliotheque graphique.
- Elle est utile pour manipuler des fenetres, des images et des evenements clavier ou souris (entres du joueur).
- Dans notre cas cette librairie va etre utile pour afficher une fenetre, les sprites et pour deplacer le joueur.  


Création de la map :

Format du fichier ? 
=>  .ber ou .txt    (différence ?)

exemple :

1111111
1000001
1011101
100E001
1111111

1 = mur
0 = vide/sol
E = sortie/exit

Lire le fichier avec la fonction get_next_line()
Associer chaque caractère lu à un sprite 


Gérer le joueur :

Ajouter un personnage sur la map
    => P = player ou J = joueur
Associer chaque caractère lu à un sprite 
Implémentation des touches (WASD)
Condition pour ne pas traverser les murs


Objets :
Ajouter des coin à collecter
    => C = coin
Associer chaque caractère lu à un sprite 
Gestion de la collision entre le coin et le player
Condition de sortie du jeu après avoir récupérer tout les coins


(Makefile)
- Faire le Makefile comme d'habitude avec Make etc.
- Synthaxe : 
    =>  '=' : La variable est évaluée à chaque utilisation (évaluation différée).
    =>  ':=' : La variable est évaluée immédiatement au moment de sa définition (évaliuation immédiatement).
- Ajouter une variable qui va identifier le système d'exploitation de la machine via la commande shell [uname -a]
- Donner avec les conditions deux chemin possible
    => MacOS ou Linux
- Dans chaqune des parties il y aura le chemin vers le dossier necessaire pour l'OS ainsi que les flags a utiliser
- La compilation de MLX est différente pour Linux et MacOS (flags différents)
- Placer des conditions pour utiliser les bons flags selon le système d'exploitation
    => La synthaxe des conditions dans le Makefile change
        => ifeq vérifie que le condition est vraie et ifneq vérifie 
        => Les variables sont comparées à l'aide de CONDITION et VALEUR.
            => ifeq (CONDITION, VALEUR)
            => Darwin est le nom du noyau Unix utilisé par MacOS
- Donner des variables avec le chemin necessaire pour aller jusqu'a la Libft et a printf
- Pour chacun des trois dossiers ajouter (Libft, printf et MLX) faire le make
    => Pour la MLX donner une commande chmod en plus pour lui autoriser les acces
- Comme pour le make faire le clean et fclean des trois dossiers sous-jacents
- Ajouter une action norminette controler la norme par la meme occasion

Comprendre la MinilibiX

- Fait pour les étudiants
- API
- Based on the X-Window sytstem
- fondement qui permet aux interfaces utilisateur graphiques (GUI) de fonctionner sur des systèmes d'exploitation de type UNIX.
- Mediator between inputs and the visual outputs (on the screen)
- translate the interactions into visible changes on the display
- MLX more accessible for daily commuters (LibX more difficult to use)
- To start use the fonction mlx_init()
- To start a connection with the X-Window server
- It prepare a structure 

serveur : 
- Programme ou système qui fournit des services à d'autres programmes
- Dans ce projet il est beaucoup question de serveur graphique
    => Permet de ne pas gérer directement la carte graphique, car c'est le serveur qui s'en charge
    => Permet à plusieurs programmes de partager l'écran et les ressources graphiques sans conflit


mlx_init()
- Initalisation de la connexion graphique 
- Cette fonction établit une connexion avec le serveur (serveur X11 sous Linux)
- Sur macOS la connexion se fait grace a l'utilisation du framework graphique natif de macOS (Quartz)
- Quartz est la base du système graphique de macOS, et il permet de gérer les fenêtres, les événements clavier/souris et le rendu des éléments graphiques directement.
- Framework graphique natif : est un ensemble de bibliothèques et d'outils fournis par un système d'exploitation pour gérer l'affichage graphique.
- Cette fonction retourne un contexte graphique.
- Contexte graphique : est un ensemble de ressources et d'informations permettant à un programme de dessiner des images, d'interagir avec des fenêtres et de gérer les événements utilisateur
- Un pointeur du type void *mlx est retourné 
- Ce pointeur est important, car il représente le contexte graphique de notre jeu (instructions) 
- Si cette fonction échoue, elle retourne NULL
- Exemple de cas d'erreur : si le serveur graphique est inacessible
- Dans ce projet cette fonction sera la première étape pour ensuite ouvrir une fenêtre pour notre jeu

- mlx_new_window() ou mlx_put_image_to_window() pour afficher les textures et les sprites
- mlx_hook() ou mlx_loop_hook() pour gérer les interactions utilisateur et la logique du jeu

Questions :
- 



(Recursivité du Makefile à voir)






framework


map
Pour savoir si une map est valide nous aurons besoin d'un map checkeur.
Ce checkeur sera composé de divers fonction ayant chacune un rôle spécifique en temps que checkeur.


Here we go again :

Pour commencer (remplir la grid)
Puis il nous faudra vérifier plusieurs conditions concernant la map.
Pour se faire nous aurons donc besoin de faire plusieurs fonction vérifiant ces condition.
Chacune des ces fonctions devra renvoyer 1 si la condition est respecté est 0 si elle ne l'est pas.
Ces fonctions dans la plus part des cas serviront à nous donner des caractèristiques (variables) de notre map.
Il sera donc important de déclarer une structure qui récupèrera la variable important concernant notre map.

(Conditions)
- Contient-elle plus que 2 lignes et 2 colones ?
    -> "count_line" sera dans mon cas la fonction censé compter le nombre de ligne dans ma map.
        Cette fonction comptera le nombre de ligne grace à l'utilisation de "get_next_line".
        Et assignera cette valeure à la variable 'height' de ma structure définie précédement.
    -> Puis faire la même chose pour le nombre de colones en assigant ensuite cette variable à 'lenght' de ma structure.
- Est-ce un rectangle (le carré est aussi considéré comme un rectangle) ?
    -> La fonction "count_lenght" aura pour objectif de relever la longueur de la prmière ligne et de la comparer aux autres.
    -> Si la longueur des autres lignes n'est pas égal à celle de la première, alors ce n'est pas un rectangle (return 0).
    -> Cependant si toutes les lignes ont la même longueur, la fonction retourne 1 et donne la longueur à la variable 'lenght' (de lls struct). 
- Y a t-il des murs pour contenir le joueur dans la map ?
    -> La fonction "wall_check" sera la pour contrôler qu'il ait bien des murs là où c'est obligatoire.
    -> Première ligne, dernière ligne, première colone et dernière colone sont des endroits où les murs sont obligatoires.
- Y a t-il qu'une seule et unique sortie ?
- Y a t-il des collectibles sur la map (au moins 1) ? 
- Y a t-il une seule case playeur (P) pour commencer la partie ?
    -> Ces 3 conditions je les vérifie avec une seule fonction, la fonction "ECP_check".
    -> Déja je compte le nombre de fois que je trouve d'ECP (Exit, Coin et Player) que je donne à des variables dans ma structure.
    -> Puis je mets une condition vérifiant qu'il y ait bien le bon nombre de chaque.
- Les caractères dans le tableau sont-ils de caractères valides ?
    -> La fonction "char_nvalid" va s'assurer qu'il n'y ait rien d'autre que les caractères E, C, P, 1 et 0.

Le programme aura besoin d'une fonction vérifiant que toutes les fonctions conditions renvoient 1.
Si une seule des fonctions renvoie 0 la fonction "check_all" retournera 0.

La fonction "check_all" sera ensuite utiliser dans la fonction "look_at_map" pour checker les conditions pour que la map soit valide.

---------------------------Attention revoir cette fonction car à mon sens il y a des trucs que l'ont pourrait supprimer

Cette fonction "look_at_map" sera quant à elle appellé dans le main comme un booléen.
Si pas OK printf un message d'erreur et free...

