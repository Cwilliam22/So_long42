So_long :

Gestion des ibliothèques :

MLX (MiniLibX)
- MLX est une petite bibliotheque graphique.
- Elle est utile pour manipuler des fenetres, des images et des evenements clavier ou souris (entres du joueur).
- Dans notre cas cette librairie va etre utile pour afficher une fenetre, les sprites et pour deplacer le joueur.  


Création de la map :

Format du fichier ? 
=>  .ber ou .txt    (différence ?)

exemple :

1111111
1000001
1011101
100E001
1111111

1 = mur
0 = vide/sol
E = sortie/exit

Lire le fichier avec la fonction get_next_line()
Associer chaque caractère lu à un sprite 


Gérer le joueur :

Ajouter un personnage sur la map
    => P = player ou J = joueur
Associer chaque caractère lu à un sprite 
Implémentation des touches (WASD)
Condition pour ne pas traverser les murs


Objets :
Ajouter des coin à collecter
    => C = coin
Associer chaque caractère lu à un sprite 
Gestion de la collision entre le coin et le player
Condition de sortie du jeu après avoir récupérer tout les coins


(Makefile)
- Faire le Makefile comme d'habitude avec Make etc.
- Synthaxe : 
    =>  '=' : La variable est évaluée à chaque utilisation (évaluation différée).
    =>  ':=' : La variable est évaluée immédiatement au moment de sa définition (évaliuation immédiatement).
- Ajouter une variable qui va identifier le système d'exploitation de la machine via la commande shell [uname -a]
- Donner avec les conditions deux chemin possible
    => MacOS ou Linux
- Dans chaqune des parties il y aura le chemin vers le dossier necessaire pour l'OS ainsi que les flags a utiliser
- La compilation de MLX est différente pour Linux et MacOS (flags différents)
- Placer des conditions pour utiliser les bons flags selon le système d'exploitation
    => La synthaxe des conditions dans le Makefile change
        => ifeq vérifie que le condition est vraie et ifneq vérifie 
        => Les variables sont comparées à l'aide de CONDITION et VALEUR.
            => ifeq (CONDITION, VALEUR)
            => Darwin est le nom du noyau Unix utilisé par MacOS
- Donner des variables avec le chemin necessaire pour aller jusqu'a la Libft et a printf
- Pour chacun des trois dossiers ajouter (Libft, printf et MLX) faire le make
    => Pour la MLX donner une commande chmod en plus pour lui autoriser les acces
- Comme pour le make faire le clean et fclean des trois dossiers sous-jacents
- Ajouter une action norminette controler la norme par la meme occasion

Comprendre la MinilibiX

- Fait pour les étudiants
- API
- Based on the X-Window sytstem
- fondement qui permet aux interfaces utilisateur graphiques (GUI) de fonctionner sur des systèmes d'exploitation de type UNIX.
- Mediator between inputs and the visual outputs (on the screen)
- translate the interactions into visible changes on the display
- MLX more accessible for daily commuters (LibX more difficult to use)
- To start use the fonction mlx_init()
- To start a connection with the X-Window server
- It prepare a structure 

serveur : 
- Programme ou système qui fournit des services à d'autres programmes
- Dans ce projet il est beaucoup question de serveur graphique
    => Permet de ne pas gérer directement la carte graphique, car c'est le serveur qui s'en charge
    => Permet à plusieurs programmes de partager l'écran et les ressources graphiques sans conflit


mlx_init()
- Initalisation de la connexion graphique 
- Cette fonction établit une connexion avec le serveur (serveur X11 sous Linux)
- Sur macOS la connexion se fait grace a l'utilisation du framework graphique natif de macOS (Quartz)
- Quartz est la base du système graphique de macOS, et il permet de gérer les fenêtres, les événements clavier/souris et le rendu des éléments graphiques directement.
- Framework graphique natif : est un ensemble de bibliothèques et d'outils fournis par un système d'exploitation pour gérer l'affichage graphique.
- Cette fonction retourne un contexte graphique.
- Contexte graphique : est un ensemble de ressources et d'informations permettant à un programme de dessiner des images, d'interagir avec des fenêtres et de gérer les événements utilisateur
- Un pointeur du type void *mlx est retourné 
- Ce pointeur est important, car il représente le contexte graphique de notre jeu (instructions) 
- Si cette fonction échoue, elle retourne NULL
- Exemple de cas d'erreur : si le serveur graphique est inacessible
- Dans ce projet cette fonction sera la première étape pour ensuite ouvrir une fenêtre pour notre jeu

- mlx_new_window() ou mlx_put_image_to_window() pour afficher les textures et les sprites
- mlx_hook() ou mlx_loop_hook() pour gérer les interactions utilisateur et la logique du jeu

Questions :
- 



(Recursivité du Makefile à voir)






framework

